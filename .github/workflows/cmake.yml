name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-linux:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3
    - name: Install SDL2
      run: |
        sudo apt-get update -y -qq
        sudo apt-get install libsdl2-dev

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/toolchains/gcc-x86_64.cmake

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-linux
        path: |
          ${{github.workspace}}/build/fractal
          ${{github.workspace}}/build/icon.bmp

  build-windows:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3
    - name: Install SDL2 and Mingw-w64
      run: |
        sudo apt-get update -y -qq
        sudo apt-get install mingw-w64
        export version=2.0.22
        wget -r https://www.libsdl.org/release/SDL2-${version}/x86_64-w64-mingw32 -O SDL2-devel-${version}-mingw.tar.gz
        tar -xf SDL2-devel-${version}-mingw.tar.gz
        sudo mv SDL2-${version}/x86_64-w64-mingw32 /usr

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/toolchains/mingw-w64-x86_64.cmake

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-windows
        path: |
          ${{github.workspace}}/build/fractal.exe
          ${{github.workspace}}/build/icon.bmp
          ${{github.workspace}}/build/libwinpthread-1.dll
          ${{github.workspace}}/build/SDL2.dll
